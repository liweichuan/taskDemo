<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.1.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd ">

    <!--注意：如果配置了<context:component-scan>那么<context:annotation-config/>标签就可以不用再xml中配置了，因为前者包含了后者-->
    <context:component-scan base-package="com.jnshu.controller"/>
        <!--<context:exclude-filter>指定的不扫描，<context:include-filter>指定的扫描-->
        <!--<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
        <!--</context:component-scan>-->

    <!--会自动注册RequestMappingHandlerMapping与RequestMappingHandlerAdapter两个Bean,
    这是Spring MVC为@Controller分发请求所必需的，并且提供了数据绑定支持，
    @NumberFormatannotation支持，@DateTimeFormat支持,@Valid支持读写XML的支持（JAXB）和读写JSON的支持（默认Jackson）等功能-->
    <mvc:annotation-driven/>

    <!--配置静态资源访问
   如果你的DispatcherServlet拦截 *.do这样的URL，就不存在访问不到静态资源的问题。
   如果你的DispatcherServlet拦截“/”，拦截了所有的请求，同时对*.js,*.jpg的访问也就被拦截了。
   目的：可以正常访问静态文件，不要找不到静态文件报404-->
    <!--location是真实的路径，mapping是对外显示的映射的路径。-->
    <!--<mvc:resources location="/static/image/" mapping="/image/**"/>-->
    <!--<mvc:resources location="/static/js/" mapping="/js/**"/>-->
    <!--<mvc:resources location="/static/css/" mapping="/css/**"/>-->
    <mvc:default-servlet-handler/>


    <!-- 配置视图解析器: 把 controller 方法返回值解析为实际的物理视图 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

<!--    &lt;!&ndash;加载tiles框架&ndash;&gt;-->
<!--    <bean id="tilesViewResolver" class="org.springframework.web.servlet.view.tiles3.TilesViewResolver" p:order="1"/>-->
<!--    <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">-->
<!--        <property name="definitions">-->
<!--            <list>-->
<!--                <value>classpath:tiles.xml</value>-->
<!--            </list>-->
<!--        </property>-->
<!--    </bean>-->

<!--    &lt;!&ndash;设置拦截器，拦截登陆后页面&ndash;&gt;-->
    <mvc:interceptors>
        <!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->
        <!--<bean class="Interceptor.CookieInterceptor"/>-->
        <mvc:interceptor>
            <mvc:mapping path="/u/*"/>
            <!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
            <bean class="com.jnshu.serviceimpl.LoginInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>


    <!--MultipartResolver 用于处理文件上传，当收到请求时 DispatcherServlet 的 checkMultipart() 方法
      会调用 MultipartResolver 的 isMultipart() 方法判断请求中是否包含文件。如果请求数据中包含文件，
      则调用 MultipartResolver 的 resolveMultipart() 方法对请求的数据进行解析，然后将文件数据解析成 MultipartFile
      并封装在 MultipartHttpServletRequest (继承了 HttpServletRequest) 对象中，最后传递给 Controller，-->
    <!--文件上传解析-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 设定默认编码 -->
        <property name="defaultEncoding" value="UTF-8" />
        <!-- 设定文件上传的最大值5MB，5*1024*1024byte -->
        <property name="maxUploadSize" value="6291456" />
        <!-- 设定文件上传时写入内存的最大值，如果小于这个参数不会生成临时文件，默认为10240 -->
        <property name="maxInMemorySize" value="4096" />
    </bean>

</beans>