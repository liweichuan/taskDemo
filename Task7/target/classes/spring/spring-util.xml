<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

    <!--加载redis的配置文件-->
    <context:property-placeholder location="classpath:properties/redis.properties" ignore-unresolvable="true"/>
    <!--redis-->
    <!-- redis config start -->
    <!-- 配置JedisPoolConfig实例 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- 最大空闲连接数 -->
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="maxTotal" value="${redis.maxActive}"/>
        <!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 -->
        <property name="maxWaitMillis" value="${redis.maxWait}"/>
        <!-- 在获取连接的时候检查有效性, 默认false -->
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
    </bean>

    <!-- 配置JedisConnectionFactory -->
    <!-- Spring-redis连接池管理工厂 -->
    <bean id="jedisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <!-- IP地址 -->
        <property name="hostName" value="${redis.host}"/>
        <!-- 端口号 -->
        <property name="port" value="${redis.port}"/>
        <!-- <property name="password" value="${redis.pass}" /> -->
        <!--<property name="database" value="${redis.dbIndex}"/>-->
        <!-- 超时时间 默认2000-->
        <property name="timeout" value="${redis.timeout}" />
        <property name="poolConfig" ref="poolConfig"/>
        <!-- usePool：是否使用连接池 -->
        <property name="usePool" value="true"/>
    </bean>

    <!--  SDR默认采用的序列化策略有两种，一种是String的序列化策略，一种是JDK的序列化策略。
          StringRedisTemplate默认采用的是String的序列化策略，保存的key和value都是采用此策略序列化保存的。
          RedisTemplate默认采用的是JDK的序列化策略，保存的key和value都是采用此策略序列化保存的。
          就是因为序列化策略的不同，即使是同一个key用不同的Template去序列化，结果是不同的。所以根据key去删除数据的时候就出现了删除失败的问题 -->
    <!-- redis 序列化策略 ，通常情况下key值采用String序列化策略， -->
    <!-- 如果不指定序列化策略，StringRedisTemplate的key和value都将采用String序列化策略； -->
    <!-- 但是RedisTemplate的key和value都将采用JDK序列化 这样就会出现采用不同template保存的数据不能用同一个template删除的问题 -->
    <!-- 配置RedisTemplate -->
<!--    <bean id="stringRedisSerializer"  class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory" />
        <!--如果不配置Serializer，那么存储的时候智能使用String，如果用User类型存储，那么会提示错误User can't cast
            to String！！！ -->
        <!-- 序列化String类型的key和value -->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <!-- 序列化key和value采用java序列化 -->
        <property name="valueSerializer" >
             <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <!--开启事务  -->
        <property name="enableTransactionSupport" value="true"/>
    </bean>

    <!--自定义redis工具类,在需要缓存的地方注入此类  -->
    <bean id="redisUtil" class="com.jnshu.tool.RedisUtil">
        <property name="redisTemplate" ref="redisTemplate" />
    </bean>
    <!-- 对string操作的封装 -->
<!--    <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">-->
<!--        <constructor-arg ref="jedisConnectionFactory"/>-->
<!--        &lt;!&ndash; 开启REIDS事务支持 &ndash;&gt;-->
<!--        <property name="enableTransactionSupport" value="false"/>-->
<!--    </bean>-->

    <!--阿里短信服务-->
    <context:property-placeholder location="classpath:properties/aliSms.properties" ignore-unresolvable="true"/>
    <bean id="aliSmsBean" class="com.jnshu.tool.aliSmsUtil.AliSmsBean">
        <property name="accessKeyId" value="${mesg.acceKeyId}"/>
        <property name="accessKeySecret" value="${mesg.accessKeySecret}"/>
        <property name="signName" value="${mesg.SignName}"/>
        <property name="templateCode" value="${mesg.TemplateCode}"/>
        <property name="connectTimeout" value="${mesg.ConnectTimeout}"/>
        <property name="readTimeout" value="${mesg.ReadTimeout}"/>
    </bean>


    <!--阿里图片存储-->
<!--    <context:property-placeholder location="classpath:properties/oss.properties" ignore-unresolvable="true"/>-->
<!--    <bean id="ossbean" class="util.ossUtil.OssBean">-->
<!--        <property name="accessKeyId" value="${oss.accessKeyId}"/>-->
<!--        <property name="accessKeySecret" value="${oss.accessKeySecret}"/>-->
<!--        <property name="bucketName" value="${oss.bucketName}"/>-->
<!--        <property name="contentype" value="${oss.contentype}"/>-->
<!--        <property name="endpoint" value="${oss.endpoint}"/>-->
<!--    </bean>-->

    <!--阿里邮箱推送-->
    <context:property-placeholder location="classpath:properties/aliMail.properties" ignore-unresolvable="true"/>
    <bean name="aliMailBean" class="com.jnshu.tool.aliMailUtil.AliMailBean">
        <property name="accessKeyId" value="${email.acceKeyId}"/>
        <property name="accessKeySecret" value="${email.accessKeySecret}"/>
        <property name="accountName" value="${email.accountName}"/>
        <property name="fromAlias" value="${email.fromAlias}"/>
        <property name="subject" value="${email.subject}"/>
        <property name="tagName" value="${email.tagName}"/>
    </bean>
</beans>